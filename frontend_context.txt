--- Project Context: frontend ---
Generated on: 2025-06-21 06:43:36

--- Directory Structure ---
├── .gitignore
├── Initial commands,.txt
├── package.json
├── README.md
├── public/
│   ├── index.html
│   ├── manifest.json
│   └── robots.txt
└── src/
    ├── AdminPage.css
    ├── AdminPage.js
    ├── AnalyzeCase.js
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── EvidenceModal.js
    ├── index.css
    ├── index.js
    ├── NetworkInfoForm.js
    ├── NewCaseModal.js
    ├── PlanDisplay.css
    ├── PlanDisplay.js
    ├── SourceDocuments.js
    ├── TacSummary.js
    ├── Upload.js
    ├── Workspace.js
    └── context/
        └── CaseContext.js

--- File Contents ---

### package.json ###
```
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.10.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.2",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

```

### public/index.html ###
```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

```

### src/AdminPage.css ###
```
/* src/AdminPage.css */

.admin-page-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: #f8f9fa;
}

.admin-header {
  background-color: #343a40;
  color: white;
  padding: 20px 30px;
  border-bottom: 4px solid #007bff;
}

.admin-header h2 {
  margin: 0;
  font-size: 1.8rem;
}

.admin-header p {
  margin: 5px 0 0;
  opacity: 0.8;
}

.admin-content {
  padding: 20px;
  overflow-y: auto;
  flex-grow: 1;
}

/* We can reuse some of the upload styles, but let's scope them
   to be inside the admin page for better separation */
.admin-content .upload-container {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  padding: 30px;
  max-width: 700px;
  margin: 0 auto;
}
```

### src/AdminPage.js ###
```
// src/AdminPage.js
import React from 'react';
import Upload from './Upload';
import './AdminPage.css';

function AdminPage() {
  return (
    <div className="admin-page-container">
      <div className="admin-header">
        <h2>Administrator Panel</h2>
        <p>Manage the agent's knowledge base and other system settings.</p>
      </div>
      <div className="admin-content">
        <Upload />
      </div>
    </div>
  );
}

export default AdminPage;
```

### src/AnalyzeCase.js ###
```
// src/AnalyzeCase.js

import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom'; // To navigate programmatically
import { useCaseContext } from './context/CaseContext';
const API_URL = process.env.REACT_APP_API_URL;

function AnalyzeCase() {
  const [caseId, setCaseId] = useState('');
  const [reportedIssue, setReportedIssue] = useState('');
  const [logFile, setLogFile] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [statusMessage, setStatusMessage] = useState('');
  const [taskId, setTaskId] = useState(null);

  const intervalRef = useRef(null);
  const navigate = useNavigate(); // Hook for navigation
  const { setActiveCaseId } = useCaseContext(); // Get the setter from our context

  useEffect(() => {
    if (taskId) {
      pollStatus(taskId);
      intervalRef.current = setInterval(() => pollStatus(taskId), 3000);
    }
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [taskId]);

  const handleFileChange = (e) => {
    setLogFile(e.target.files[0]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!caseId || !reportedIssue || !logFile) {
      setStatusMessage('Please fill out all fields and select a file.');
      return;
    }
    setIsProcessing(true);
    setStatusMessage('Uploading file and starting analysis...');
    const formData = new FormData();
    formData.append('case_id', caseId);
    formData.append('reported_issue', reportedIssue);
    formData.append('log_file', logFile);

    try {
      const response = await axios.post(`${API_URL}/analyze_case`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      setStatusMessage('Analysis in progress... Polling for status.');
      setTaskId(response.data.task_id);
    } catch (error) {
      setStatusMessage(`Error: ${error.response?.data?.detail || error.message}`);
      setIsProcessing(false);
    }
  };

  const pollStatus = async (currentTaskId) => {
    try {
      const response = await axios.get(`${API_URL}/case/status/${currentTaskId}`);
      const task = response.data;

      switch (task.status) {
        case 'SUCCESS':
          clearInterval(intervalRef.current);
          setStatusMessage(`Analysis for Case ID ${caseId} is complete! Navigating to summary...`);
          // --- THIS IS THE NEW LOGIC ---
          // 1. Set the active case ID in our global context
          setActiveCaseId(caseId);
          // 2. Navigate the user to the chat page to see the summary
          setTimeout(() => navigate('/'), 1500); // Navigate after a short delay
          break;
        case 'FAILURE':
          setStatusMessage(`Analysis failed. Error: ${JSON.stringify(task.result)}`);
          clearInterval(intervalRef.current);
          setIsProcessing(false);
          setTaskId(null);
          break;
        default:
          setStatusMessage(`Polling... Status: ${task.status}`);
      }
    } catch (error) {
      setStatusMessage('Error polling for status. Check the console.');
      clearInterval(intervalRef.current);
      setIsProcessing(false);
      setTaskId(null);
    }
  };

  return (
    <div className="analyze-case-container">
      <h2>Analyze New Case</h2>
      <p>Upload the pre-processed log file to have the AI generate a TAC Summary.</p>
      <form onSubmit={handleSubmit} className="case-form">
        {/* Form inputs are unchanged */}
        <div className="form-group">
          <label htmlFor="caseId">Case ID</label>
          <input type="text" id="caseId" value={caseId} onChange={(e) => setCaseId(e.target.value)} placeholder="e.g., 03457611" required disabled={isProcessing} />
        </div>
        <div className="form-group">
          <label htmlFor="reportedIssue">Customer Reported Issue</label>
          <textarea id="reportedIssue" value={reportedIssue} onChange={(e) => setReportedIssue(e.target.value)} placeholder="e.g., 'ONT is stuck in a discovery loop.'" rows="4" required disabled={isProcessing} />
        </div>
        <div className="form-group">
          <label htmlFor="logFile">Extracted Log File (.txt)</label>
          <input type="file" id="logFile" accept=".txt" onChange={handleFileChange} required disabled={isProcessing} />
        </div>
        <button type="submit" disabled={isProcessing}>
          {isProcessing ? 'Analyzing...' : 'Start Analysis'}
        </button>
      </form>
      {statusMessage && (
        <div className="status-box">
          <strong>Status:</strong> {statusMessage}
        </div>
      )}
    </div>
  );
}

export default AnalyzeCase;
```

### src/App.css ###
```
/* src/App.css */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f0f2f5;
}

.App {
  display: flex;
  flex-direction: column;
  height: 100vh;
  max-width: 800px;
  margin: 0 auto;
  background-color: #fff;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.header {
  background-color: #007bff;
  color: white;
  padding: 15px 20px;
  text-align: center;
  font-size: 1.2rem;
  display: flex;
  align-items: center;
  flex-shrink: 0;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.nav-link-title {
  color: white;
  text-decoration: none;
}
.nav-link-title h1 {
  margin: 0;
  font-size: 1.5rem;
}


.navigation {
  display: flex;
  gap: 10px;
}

.nav-link {
  color: white;
  text-decoration: none;
  padding: 8px 12px;
  border-radius: 6px;
  transition: background-color 0.2s;
}

.nav-link:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.nav-link.active {
  background-color: rgba(255, 255, 255, 0.3);
  font-weight: bold;
}

.content-area {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.chat-input {
  display: flex;
  padding: 15px;
  border-top: 1px solid #ddd;
  background-color: #f9f9f9;
  flex-shrink: 0;
}

.chat-input input {
  flex-grow: 1;
  border: 1px solid #ccc;
  border-radius: 20px;
  padding: 12px 18px;
  font-size: 16px;
  margin-right: 10px;
  outline: none;
}

.chat-input input:focus {
  border-color: #007bff;
}

.chat-input button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 12px 25px;
  border-radius: 20px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background-color 0.2s;
}

.chat-input button:hover:not(:disabled) {
  background-color: #0056b3;
}

.chat-input button:disabled {
  background-color: #a0c7ff;
  cursor: not-allowed;
}

/* --- TAC Summary & Network Info Form --- */
.tac-summary-wrapper {
  overflow-y: auto;
  flex-grow: 1;
}
.tac-summary-widget {
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 20px;
  margin: 20px;
  font-size: 15px;
}
.tac-summary-widget.loading, .tac-summary-widget.error { text-align: center; color: #6c757d; padding: 40px 20px; }
.tac-summary-widget.error { background-color: #f8d7da; color: #721c24; border-color: #f5c6cb; }

.summary-header h3 {
  margin-top: 0;
  color: #0056b3;
  border-bottom: 2px solid #007bff;
  padding-bottom: 10px;
  margin-bottom: 20px;
}

.summary-section { margin-bottom: 20px; }
.summary-section:last-child { margin-bottom: 0; }
.summary-section h4 { margin-bottom: 8px; color: #343a40; font-size: 16px; }
.summary-section p, .summary-section li { margin: 4px 0; line-height: 1.6; color: #495057; }
.summary-section ul { padding-left: 20px; margin-top: 5px; margin-bottom: 5px; }

/* --- NEW: Network Info Form Styles --- */
.network-info-form {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 6px;
  border: 1px solid #ced4da;
  margin-bottom: 20px;
}
.network-info-form .form-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}
.network-info-form .form-header h4 {
  margin: 0;
  color: #343a40;
}
.network-info-form .form-header button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
}
.network-info-form .form-header button:disabled {
  background-color: #81d492;
}
.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 15px;
}
.form-row {
  display: flex;
  flex-direction: column;
}
.form-row label {
  margin-bottom: 5px;
  font-weight: 500;
  color: #495057;
  font-size: 14px;
}
.form-row input, .form-row select {
  padding: 8px 12px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  font-size: 15px;
}
.form-error {
  color: #dc3545;
  margin-top: 10px;
  font-size: 14px;
}


/* --- Workspace & No Case View --- */
.workspace-container {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  overflow: hidden;
}
.no-case-view {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: 40px;
  flex-grow: 1;
  background-color: #f8f9fa;
}
.no-case-view h2 { color: #343a40; }
.no-case-view p { color: #6c757d; font-size: 1.1rem; margin-bottom: 30px; }
.case-selection-actions { display: flex; gap: 20px; align-items: center; }
.recent-cases-container select { font-size: 1rem; padding: 10px; border-radius: 6px; border: 1px solid #ced4da; }

/* --- Interaction Log --- */
.interaction-log-container {
  padding: 10px 20px;
  max-height: 250px;
  overflow-y: auto;
  border-top: 1px solid #eee;
  flex-shrink: 0;
}
.interaction-message-wrapper {
  display: flex;
  flex-direction: column;
  margin-top: 12px;
}
.interaction-message-wrapper.user { align-items: flex-end; }
.interaction-message-wrapper.agent { align-items: flex-start; }
.interaction-message {
  padding: 10px 15px;
  border-radius: 18px;
  line-height: 1.4;
  word-wrap: break-word;
  max-width: 80%;
  display: inline-block;
  white-space: pre-wrap;
}
.interaction-message.user { background-color: #007bff; color: white; border-bottom-right-radius: 4px; }
.interaction-message.agent { background-color: #e9e9eb; color: #333; border-bottom-left-radius: 4px; }
.interaction-message.plan {
  background-color: transparent;
  padding: 0;
  max-width: 100%;
}
.interaction-message strong { font-weight: bold; display: block; margin-bottom: 4px; font-size: 12px; opacity: 0.8; }

/* --- Modal Styles --- */
.modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; }
.modal-content { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); width: 100%; max-width: 500px; }
.modal-content h2 { margin-top: 0; }
.modal-error { color: #721c24; background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 10px; border-radius: 4px; margin-top: 15px; }
.modal-actions { display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px; }
.btn-primary { background-color: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-size: 1rem; }
.btn-primary:disabled { background-color: #a0c7ff; }
.btn-secondary { background-color: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-size: 1rem; }

/* --- NEW: New Case Modal Styles --- */
.form-group {
  display: flex;
  flex-direction: column;
  margin-bottom: 15px;
}
.form-group label {
  margin-bottom: 5px;
  font-weight: bold;
}
.form-group input, .form-group select {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 1rem;
}
.form-group small {
  font-size: 0.8rem;
  color: #6c757d;
  margin-top: 5px;
}
```

### src/App.js ###
```
// src/App.js

import React from 'react';
import { BrowserRouter as Router, Routes, Route, NavLink } from 'react-router-dom';
import './App.css';
import './AdminPage.css';
import './PlanDisplay.css'; // <-- ADD THIS LINE
import Workspace from './Workspace';
import AdminPage from './AdminPage';
import { CaseProvider, useCaseContext } from './context/CaseContext';

// A new component for the header to access context
function AppHeader() {
  const { activeCaseId } = useCaseContext();

  return (
    <div className="header">
      <div className="header-content">
        <NavLink to="/" className="nav-link-title">
          <h1>
            {activeCaseId ? `Case: ${activeCaseId}` : 'Network Engineer Agent'}
          </h1>
        </NavLink>
        <nav className="navigation">
          <NavLink to="/" className={({ isActive }) => (isActive ? 'nav-link active' : 'nav-link')}>
            Workspace
          </NavLink>
          <NavLink to="/admin" className={({ isActive }) => (isActive ? 'nav-link active' : 'nav-link')}>
            Admin
          </NavLink>
        </nav>
      </div>
    </div>
  );
}


function App() {
  return (
    <CaseProvider>
      <Router>
        <div className="App">
          <AppHeader />
          <div className="content-area">
            <Routes>
              <Route path="/" element={<Workspace />} />
              <Route path="/admin" element={<AdminPage />} />
            </Routes>
          </div>
        </div>
      </Router>
    </CaseProvider>
  );
}

export default App;
```

### src/App.test.js ###
```
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

### src/EvidenceModal.js ###
```
// src/EvidenceModal.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL;

function EvidenceModal({ caseId, evidenceType, onClose }) {
  const [content, setContent] = useState('Loading evidence...');
  const [error, setError] = useState('');

  useEffect(() => {
    if (caseId && evidenceType) {
      const fetchEvidence = async () => {
        try {
          const response = await axios.get(`${API_URL}/case/${caseId}/evidence/${evidenceType}`);
          setContent(response.data || 'Evidence file is empty.');
        } catch (err) {
          setError(err.response?.data?.detail || 'Failed to load evidence.');
          setContent('');
        }
      };
      fetchEvidence();
    }
  }, [caseId, evidenceType]);

  return (
    <div className="modal-backdrop" onClick={onClose}>
      <div className="modal-content evidence-modal" onClick={(e) => e.stopPropagation()}>
        <h2>Evidence: {evidenceType}</h2>
        <div className="evidence-content">
          {error && <p className="modal-error">{error}</p>}
          <pre>{content}</pre>
        </div>
        <div className="modal-actions">
          <button onClick={onClose} className="btn-secondary">Close</button>
        </div>
      </div>
    </div>
  );
}

export default EvidenceModal;
```

### src/index.css ###
```
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

```

### src/index.js ###
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

```

### src/NetworkInfoForm.js ###
```
// src/NetworkInfoForm.js
import React, { useState, useEffect, useMemo } from 'react';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL;

function NetworkInfoForm({ caseData, contextOptions, problemCategories, onUpdate }) {
  const [formData, setFormData] = useState({});
  const [isUpdating, setIsUpdating] = useState(false);
  const [error, setError] = useState('');

  // When caseData changes, update the form's internal state
  useEffect(() => {
    if (caseData?.network_info) {
      setFormData(caseData.network_info);
    }
  }, [caseData]);

  // Calculate which fields to show based on selected problem areas
  const requiredFields = useMemo(() => {
    if (!caseData?.problem_areas || !problemCategories) {
      return new Set();
    }
    const fields = new Set();
    caseData.problem_areas.forEach(areaId => {
      const category = problemCategories.find(cat => cat.id === areaId);
      category?.required_fields?.forEach(field => fields.add(field));
    });
    return fields;
  }, [caseData?.problem_areas, problemCategories]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleUpdate = async () => {
    setIsUpdating(true);
    setError('');
    try {
      await axios.post(`${API_URL}/api/v1/cases/${caseData.case_id}/network-info`, {
        network_info: formData,
      });
      onUpdate(); // Notify parent to refetch case data
    } catch (err) {
      setError(err.response?.data?.detail || 'Failed to update network info.');
    } finally {
      setIsUpdating(false);
    }
  };

  // Helper to get dropdown options for a given field
  const getOptionsForField = (fieldName) => {
    if (!contextOptions) return [];
    switch (fieldName) {
      case 'platform':
        return contextOptions.platforms?.map(p => p.name) || [];
      case 'software_version':
        const selectedPlatform = contextOptions.platforms?.find(p => p.name === formData.platform);
        return selectedPlatform?.software_versions || [];
      case 'olt_card_type':
        const platformForOlt = contextOptions.platforms?.find(p => p.name === formData.platform);
        return platformForOlt?.olt_card_types || [];
      case 'ont_model':
        return contextOptions.ont_models || [];
      default:
        return [];
    }
  };

  const renderField = (fieldName) => {
    const options = getOptionsForField(fieldName);
    const label = fieldName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

    if (options.length > 0) {
      return (
        <div key={fieldName} className="form-row">
          <label htmlFor={fieldName}>{label}</label>
          <select
            id={fieldName}
            name={fieldName}
            value={formData[fieldName] || 'N/A'}
            onChange={handleInputChange}
          >
            <option value="N/A" disabled>Select...</option>
            {options.map(opt => <option key={opt} value={opt}>{opt}</option>)}
          </select>
        </div>
      );
    }

    return (
      <div key={fieldName} className="form-row">
        <label htmlFor={fieldName}>{label}</label>
        <input
          type="text"
          id={fieldName}
          name={fieldName}
          value={formData[fieldName] || ''}
          onChange={handleInputChange}
          placeholder={label}
        />
      </div>
    );
  };

  if (requiredFields.size === 0) {
    return (
        <div className="network-info-form">
            <h4>Network Info</h4>
            <p>Select a problem area to specify network context.</p>
        </div>
    );
  }

  return (
    <div className="network-info-form">
      <div className="form-header">
        <h4>Network Info</h4>
        <button onClick={handleUpdate} disabled={isUpdating}>
          {isUpdating ? 'Updating...' : 'Update Context'}
        </button>
      </div>
      <div className="form-grid">
        {Array.from(requiredFields).map(fieldName => renderField(fieldName))}
      </div>
      {error && <p className="form-error">{error}</p>}
    </div>
  );
}

export default NetworkInfoForm;
```

### src/NewCaseModal.js ###
```
// src/NewCaseModal.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL;

// A new component for the multi-select dropdown
const MultiSelect = ({ label, options, selectedValues, onChange }) => {
  const handleSelect = (e) => {
    const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
    onChange(selectedOptions);
  };

  return (
    <div className="form-group">
      <label htmlFor="problem-areas">{label}</label>
      <select
        id="problem-areas"
        multiple
        value={selectedValues}
        onChange={handleSelect}
        required
        size="5" // Show 5 options at a time
      >
        {options.map(option => (
          <option key={option.id} value={option.id}>
            {option.displayName}
          </option>
        ))}
      </select>
      <small>Hold Ctrl (or Cmd on Mac) to select multiple options.</small>
    </div>
  );
};


function NewCaseModal({ onCaseCreated, onClose }) {
  const [caseId, setCaseId] = useState('');
  const [problemAreas, setProblemAreas] = useState([]);
  const [availableCategories, setAvailableCategories] = useState([]);
  const [error, setError] = useState('');
  const [isCreating, setIsCreating] = useState(false);

  // Fetch problem categories when the modal mounts
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        // This assumes your problem categories are available via the context-options endpoint
        // or you could create a dedicated endpoint for it.
        const response = await axios.get(`${API_URL}/api/v1/context-options`);
        // Let's assume the categories are in a separate key or we derive them
        // For now, let's mock it based on a potential new endpoint or structure
        const problemCatsResponse = await axios.get(`${API_URL}/api/v1/problem-categories`); // Hypothetical endpoint
        setAvailableCategories(problemCatsResponse.data.categories);
      } catch (err) {
        // Let's fetch from the context-options as a fallback for now
         try {
            const response = await axios.get(`${API_URL}/api/v1/context-options`);
            // This is a placeholder. We need a dedicated categories endpoint.
            // For now, we'll create a dummy one.
            const categories = [
                { id: 'ont_issue', displayName: 'ONT/GPON Issue' },
                { id: 'interface_issue', displayName: 'Interface/Port Issue' },
                { id: 'system_issue', displayName: 'Platform/System Issue' },
                { id: 'routing_issue', displayName: 'BGP/Routing Issue' },
            ];
            setAvailableCategories(categories);
         } catch (finalErr) {
            setError('Could not load problem categories from server.');
         }
      }
    };
    // Let's create a dedicated endpoint for problem categories for cleaner design
    const fetchProblemCategories = async () => {
        try {
            const response = await axios.get(`${API_URL}/api/v1/problem-categories`); // We will need to create this endpoint
            setAvailableCategories(response.data.categories);
        } catch (err) {
            console.error("Failed to fetch problem categories", err);
            setError("Failed to load configuration from server.");
        }
    };
    // For now, let's just use a hardcoded list until the endpoint is made
    const categories = [
        { id: 'ont_issue', displayName: 'ONT/GPON Issue' },
        { id: 'interface_issue', displayName: 'Interface/Port Issue' },
        { id: 'system_issue', displayName: 'Platform/System Issue' },
        { id: 'routing_issue', displayName: 'BGP/Routing Issue' },
    ];
    setAvailableCategories(categories);

  }, []);


  const handleCaseIdChange = (e) => {
    const value = e.target.value;
    // Allow only numbers and limit to 10 digits
    if (/^\d*$/.test(value) && value.length <= 10) {
      setCaseId(value);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!caseId.trim()) {
      setError('Case ID is required.');
      return;
    }
    if (problemAreas.length === 0) {
      setError('At least one Problem Area must be selected.');
      return;
    }
    setError('');
    setIsCreating(true);

    try {
      await axios.post(`${API_URL}/cases`, {
        case_id: caseId,
        problem_areas: problemAreas,
      });
      onCaseCreated(caseId);
    } catch (err) {
      setError(err.response?.data?.detail || 'Failed to create case.');
      console.error(err);
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="modal-content">
        <h2>Create New Case</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="new-case-id">Case ID (Numeric, max 10 digits)</label>
            <input
              id="new-case-id"
              type="text"
              value={caseId}
              onChange={handleCaseIdChange}
              placeholder="Enter a unique case number"
              required
              disabled={isCreating}
              pattern="[0-9]*"
              maxLength="10"
            />
          </div>

          <MultiSelect
            label="Problem Area(s)"
            options={availableCategories}
            selectedValues={problemAreas}
            onChange={setProblemAreas}
          />

          {error && <p className="modal-error">{error}</p>}
          <div className="modal-actions">
            <button type="button" onClick={onClose} disabled={isCreating} className="btn-secondary">
              Cancel
            </button>
            <button type="submit" disabled={isCreating || problemAreas.length === 0} className="btn-primary">
              {isCreating ? 'Creating...' : 'Create Case'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default NewCaseModal;
```

### src/PlanDisplay.css ###
```
/* src/PlanDisplay.css */

.plan-display-container {
  border: 1px solid #e0e0e0;
  border-radius: 12px;
  background-color: #f9f9f9;
  margin-top: 8px;
  overflow: hidden;
}

.plan-header {
  display: flex;
  align-items: center;
  padding: 10px 15px;
  background-color: #e9ecef;
  border-bottom: 1px solid #dee2e6;
}

.plan-status-icon {
  font-size: 1.5rem;
  margin-right: 12px;
}

.plan-title-group {
  display: flex;
  flex-direction: column;
}

.plan-title-group h4 {
  margin: 0;
  font-size: 1rem;
  color: #343a40;
}

.plan-title-group span {
  font-size: 0.8rem;
  color: #6c757d;
  text-transform: capitalize;
}

.plan-steps-list {
  list-style-type: none;
  margin: 0;
  padding: 10px 15px;
}

.plan-step {
  display: flex;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px dashed #e0e0e0;
  transition: opacity 0.3s ease-in-out;
}

.plan-step:last-child {
  border-bottom: none;
}

.step-status-icon {
  font-size: 1.2rem;
  margin-right: 10px;
  flex-shrink: 0;
}

.step-details {
  display: flex;
  flex-direction: column;
}

.step-description {
  color: #212529;
  font-size: 0.9rem;
}

.step-error {
  color: #dc3545;
  font-size: 0.8rem;
  margin-top: 4px;
  font-style: italic;
}

/* Style steps based on status */
.plan-step.pending {
  opacity: 0.6;
}

.plan-step.executing {
  opacity: 1;
  font-weight: bold;
}

.plan-step.completed {
  opacity: 1;
}

.plan-step.failed {
  opacity: 1;
  background-color: #f8d7da;
  border-left: 4px solid #dc3545;
  margin-left: -19px; /* Offset for the border */
  padding-left: 15px;
  border-radius: 4px;
}
```

### src/PlanDisplay.js ###
```
// src/PlanDisplay.js
import React from 'react';
import './PlanDisplay.css';

// Helper to get the right icon for each status
const getStatusIcon = (status) => {
  switch (status) {
    case 'pending':
      return '🕒'; // Clock
    case 'executing':
      return '⚙️'; // Gear
    case 'completed':
      return '✅'; // Green check
    case 'failed':
      return '❌'; // Red X
    default:
      return '❔'; // Question mark
  }
};

function PlanDisplay({ plan }) {
  if (!plan || !plan.steps) {
    return null;
  }

  return (
    <div className="plan-display-container">
      <div className="plan-header">
        <span className="plan-status-icon">🤖</span>
        <div className="plan-title-group">
          <h4>Agent Plan</h4>
          <span>{`Status: ${plan.overall_status}`}</span>
        </div>
      </div>
      <ul className="plan-steps-list">
        {plan.steps.map((step) => (
          <li key={step.step_id} className={`plan-step ${step.status}`}>
            <span className="step-status-icon">{getStatusIcon(step.status)}</span>
            <div className="step-details">
              <span className="step-description">{step.description}</span>
              {step.status === 'failed' && (
                <span className="step-error">{step.error_message}</span>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default PlanDisplay;
```

### src/SourceDocuments.js ###
```
// src/SourceDocuments.js

import React from 'react';

function SourceDocuments({ sources }) {
  // Don't render anything if sources are not provided or empty
  if (!sources || sources.length === 0) {
    return null;
  }

  return (
    <div className="sources-wrapper">
      <details className="sources-container">
        <summary className="sources-summary">Show Sources</summary>
        <div className="sources-list">
          {sources.map((source, index) => (
            <div key={index} className="source-item">
              {/* --- ROBUST RENDERING LOGIC --- */}
              {typeof source === 'object' && source !== null && source.page_content ? (
                // This is the ideal case: we have a full document object
                <>
                  <p className="source-content">{source.page_content}</p>
                  {source.metadata && (
                    <div className="source-metadata">
                      <span>Source: {source.metadata.source || 'N/A'}</span>
                      <span>Page: {source.metadata.page !== undefined ? source.metadata.page : 'N/A'}</span>
                    </div>
                  )}
                </>
              ) : (
                // This is the fallback case: the source is just a string
                <p className="source-content">{String(source)}</p>
              )}
            </div>
          ))}
        </div>
      </details>
    </div>
  );
}

export default SourceDocuments;
```

### src/TacSummary.js ###
```
// src/TacSummary.js
import React from 'react';
import NetworkInfoForm from './NetworkInfoForm'; // Import the new form

// A small helper component to keep our JSX clean
const SummarySection = ({ title, children }) => (
  <div className="summary-section">
    <h4>{title}</h4>
    {children}
  </div>
);

function TacSummary({ caseData, contextOptions, problemCategories, onUpdate }) {
  if (!caseData) {
    return <div className="tac-summary-widget loading">Loading case data...</div>;
  }

  const { tac_notes, recommendations, next_steps, problem_areas } = caseData;

  return (
    <div className="tac-summary-widget">
      <div className="summary-header">
        <h3>TAC Summary for Case: {caseData.case_id}</h3>
        {/* We can add an "Edit Problem Areas" button here later */}
      </div>

      {/* The new, dynamic, editable form */}
      <NetworkInfoForm
        caseData={caseData}
        contextOptions={contextOptions}
        problemCategories={problemCategories}
        onUpdate={onUpdate}
      />

      <SummarySection title="Problem Area(s)">
        <p>{problem_areas?.join(', ') || 'N/A'}</p>
      </SummarySection>

      <SummarySection title="TAC Notes">
        <p>{tac_notes?.correlation || 'No analysis notes yet.'}</p>
      </SummarySection>

      <SummarySection title="Recommendations">
        <ul>
          {recommendations?.length > 0
            ? recommendations.map((rec, index) => <li key={index}>{rec}</li>)
            : <li>N/A</li>
          }
        </ul>
      </SummarySection>

      <SummarySection title="Next Steps">
         <p>{next_steps || 'N/A'}</p>
      </SummarySection>
    </div>
  );
}

export default TacSummary;
```

### src/Upload.js ###
```
// src/Upload.js

import React, { useState } from 'react';
import axios from 'axios'; // Import axios

// --- CONFIGURATION ---
const API_URL = process.env.REACT_APP_API_URL;

function Upload() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploadStatus, setUploadStatus] = useState('idle'); // idle, uploading, success, error
  const [statusMessage, setStatusMessage] = useState('');
  const [uploadProgress, setUploadProgress] = useState(0); // New state for progress percentage

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);
      setUploadStatus('idle'); // Reset status when a new file is chosen
      setStatusMessage(`${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
    }
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (!selectedFile) {
      setStatusMessage('Please select a file first.');
      setUploadStatus('error');
      return;
    }

    setUploadStatus('uploading');
    setStatusMessage('Uploading document...');
    setUploadProgress(0); // Reset progress to 0 on new upload

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      // --- AXIOS UPLOAD LOGIC ---
      const response = await axios.post(`${API_URL}/upload_kb`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setUploadProgress(percentCompleted);
        },
      });

      setUploadStatus('success');
      setStatusMessage(`Success! Document "${selectedFile.name}" ingested into the knowledge base.`);
      setSelectedFile(null); // Clear the file input
      event.target.reset(); // Reset the form
    } catch (error) {
      setUploadStatus('error');
      // Axios wraps the server response in error.response
      const serverMessage = error.response?.data?.detail || error.message;
      setStatusMessage(`Upload failed: ${serverMessage}`);
      console.error('Upload error:', error);
    }
  };

  return (
    <div className="upload-container">
      <h2>Upload Knowledge Base Document</h2>
      <p>Upload a PDF document to add it to the agent's knowledge base.</p>
      <form onSubmit={handleSubmit} className="upload-form">
        <input
          type="file"
          accept=".pdf"
          onChange={handleFileChange}
          className="file-input"
          disabled={uploadStatus === 'uploading'}
        />
        <button type="submit" disabled={!selectedFile || uploadStatus === 'uploading'}>
          {uploadStatus === 'uploading' ? 'Uploading...' : 'Upload to KB'}
        </button>
      </form>

      {/* Display progress bar ONLY during upload */}
      {uploadStatus === 'uploading' && (
        <div className="progress-container">
          <div className="progress-bar-container">
            <div className="progress-bar" style={{ width: `${uploadProgress}%` }}>
              {uploadProgress}%
            </div>
          </div>
        </div>
      )}

      {/* Display status message for idle, success, or error states */}
      {statusMessage && uploadStatus !== 'uploading' && (
        <div className={`status-message ${uploadStatus}`}>
          {statusMessage}
        </div>
      )}
    </div>
  );
}

export default Upload;
```

### src/Workspace.js ###
```
// src/Workspace.js

import React, { useState, useEffect, useCallback, useRef } from 'react';
import axios from 'axios';
import { useCaseContext } from './context/CaseContext';
import TacSummary from './TacSummary';
import NewCaseModal from './NewCaseModal';
import PlanDisplay from './PlanDisplay';

const API_URL = process.env.REACT_APP_API_URL;
const POLLING_INTERVAL = 3000;

function Workspace() {
  // Global state
  const { activeCaseId, setActiveCaseId } = useCaseContext();

  // Component State
  const [caseData, setCaseData] = useState(null);
  const [isSummaryLoading, setIsSummaryLoading] = useState(false);
  const [summaryError, setSummaryError] = useState(null);
  const [recentCases, setRecentCases] = useState([]);
  const [isCaseListLoading, setIsCaseListLoading] = useState(true);
  const [showNewCaseModal, setShowNewCaseModal] = useState(false);

  // NEW state for holding config data
  const [contextOptions, setContextOptions] = useState(null);
  const [problemCategories, setProblemCategories] = useState(null);

  // State for interactive workspace
  const [userInput, setUserInput] =useState('');
  const [isProcessingAction, setIsProcessingAction] = useState(false);
  const [interactions, setInteractions] = useState([]);
  const [activePlanId, setActivePlanId] = useState(null);
  const logContainerRef = useRef(null);
  const pollingIntervalRef = useRef(null);

  // --- Data Fetching Callbacks ---
  const fetchCaseData = useCallback(async (id) => {
    if (!id) {
      setCaseData(null);
      return;
    }
    setIsSummaryLoading(true);
    setSummaryError(null);
    try {
      const response = await axios.get(`${API_URL}/case/${id}`);
      setCaseData(response.data);
    } catch (error) {
      console.error("Failed to fetch case data:", error);
      setSummaryError(`Could not load summary for case ${id}.`);
    } finally {
      setIsSummaryLoading(false);
    }
  }, []);

  const fetchRecentCases = useCallback(async () => {
    try {
      const response = await axios.get(`${API_URL}/cases`);
      setRecentCases(response.data);
    } catch (error) {
      console.error("Failed to fetch recent cases:", error);
    } finally {
      setIsCaseListLoading(false);
    }
  }, []);

  // NEW: Fetch all config data on initial load
  useEffect(() => {
    const fetchConfigData = async () => {
      try {
        const [optionsRes, categoriesRes] = await Promise.all([
          axios.get(`${API_URL}/api/v1/context-options`),
          // We need to create this endpoint on the backend
          // For now, we'll mock it.
          Promise.resolve({ data: { categories: [
            { id: 'ont_issue', displayName: 'ONT/GPON Issue', required_fields: ['platform', 'software_version', 'olt_card_type', 'ont_model'] },
            { id: 'interface_issue', displayName: 'Interface/Port Issue', required_fields: ['platform', 'software_version', 'affected_interface'] },
            { id: 'system_issue', displayName: 'Platform/System Issue', required_fields: ['platform', 'software_version'] },
            { id: 'routing_issue', displayName: 'BGP/Routing Issue', required_fields: ['platform', 'software_version', 'router_id', 'neighbor_ip'] },
          ]}})
        ]);
        setContextOptions(optionsRes.data);
        setProblemCategories(categoriesRes.data.categories);
      } catch (error) {
        console.error("Failed to fetch configuration data:", error);
        // Handle error appropriately, maybe show a global error message
      }
    };
    fetchConfigData();
    fetchRecentCases();
  }, [fetchRecentCases]);


  // --- Effects ---
  useEffect(() => {
    if (activeCaseId) {
      fetchCaseData(activeCaseId);
      setInteractions([]);
      setActivePlanId(null);
    } else {
      setCaseData(null);
    }
  }, [activeCaseId, fetchCaseData]);

  useEffect(() => {
    if (logContainerRef.current) {
      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;
    }
  }, [interactions]);

  const pollPlanStatus = useCallback(async () => {
    if (!activePlanId) return;
    try {
      const response = await axios.get(`${API_URL}/plan/status/${activePlanId}`);
      const updatedPlan = response.data;

      setInteractions(prev =>
        prev.map(interaction =>
          interaction.type === 'plan' && interaction.plan.plan_id === activePlanId
            ? { ...interaction, plan: updatedPlan }
            : interaction
        )
      );

      if (updatedPlan.overall_status === 'completed' || updatedPlan.overall_status === 'failed') {
        setActivePlanId(null);
        setIsProcessingAction(false);

        if (updatedPlan.final_answer) {
            const answer = updatedPlan.final_answer;
            let answerText;

            // Handle both successful recommendations and validation failures
            if (answer.status === 'failed_validation') {
                answerText = `AGENT: ${answer.message_for_user}`;
            } else if (answer.status === 'success' && answer.commands) {
                answerText = `Here are the recommended commands:\n- ${answer.commands.join('\n- ')}`;
            } else {
                answerText = typeof answer === 'string' ? answer : JSON.stringify(answer, null, 2);
            }
            setInteractions(prev => [...prev, { type: 'agent', text: answerText }]);
        }

        if (JSON.stringify(updatedPlan).includes("case_updater_v1")) {
            fetchCaseData(activeCaseId);
        }
      }
    } catch (error) {
      console.error("Polling failed:", error);
      setInteractions(prev => [...prev, { type: 'agent', text: `Error checking plan status: ${error.message}` }]);
      setActivePlanId(null);
      setIsProcessingAction(false);
    }
  }, [activePlanId, activeCaseId, fetchCaseData]);

  useEffect(() => {
    if (activePlanId) {
      pollingIntervalRef.current = setInterval(pollPlanStatus, POLLING_INTERVAL);
    } else {
      clearInterval(pollingIntervalRef.current);
    }
    return () => clearInterval(pollingIntervalRef.current);
  }, [activePlanId, pollPlanStatus]);

  const handleCaseCreated = (newCaseId) => {
    setActiveCaseId(newCaseId);
    setRecentCases(prev => [newCaseId, ...prev.filter(id => id !== newCaseId)]);
    setShowNewCaseModal(false);
  };

  const handleActionSubmit = async (e) => {
    e.preventDefault();
    if (!userInput.trim() || !activeCaseId) return;
    const currentInput = userInput;
    setInteractions(prev => [...prev, { type: 'user', text: currentInput }]);
    setUserInput('');
    setIsProcessingAction(true);
    try {
      const response = await axios.post(`${API_URL}/cases/${activeCaseId}/action`, {
        user_input: currentInput,
      });
      const initialPlan = response.data;
      setInteractions(prev => [...prev, { type: 'plan', plan: initialPlan }]);
      setActivePlanId(initialPlan.plan_id);
    } catch (error) {
      console.error("Failed to start plan:", error);
      const errorMsg = `Error: ${error.response?.data?.detail || error.message}`;
      setInteractions(prev => [...prev, { type: 'agent', text: errorMsg }]);
      setIsProcessingAction(false);
    }
  };

  const renderNoActiveCaseView = () => (
    <div className="no-case-view">
      <h2>Welcome to the Workspace</h2>
      <p>Please select a case to begin or create a new one.</p>
      <div className="case-selection-actions">
        <button onClick={() => setShowNewCaseModal(true)} className="btn-primary">New Case</button>
        <div className="recent-cases-container">
          <label htmlFor="recent-cases">Open Recent Case:</label>
          <select id="recent-cases" onChange={(e) => setActiveCaseId(e.target.value)} value={activeCaseId || ""} disabled={isCaseListLoading}>
            <option value="" disabled>{isCaseListLoading ? "Loading..." : "Select a case"}</option>
            {recentCases.map(caseId => (<option key={caseId} value={caseId}>{caseId}</option>))}
          </select>
        </div>
      </div>
    </div>
  );

  const renderWorkspaceView = () => (
    <>
      <div className="tac-summary-wrapper">
        {isSummaryLoading && <div className="tac-summary-widget loading">Loading Summary for Case {activeCaseId}...</div>}
        {summaryError && !isSummaryLoading && <div className="tac-summary-widget error">{summaryError}</div>}
        {caseData && (
            <TacSummary
                caseData={caseData}
                contextOptions={contextOptions}
                problemCategories={problemCategories}
                onUpdate={() => fetchCaseData(activeCaseId)}
            />
        )}
      </div>

      <div className="interaction-log-container" ref={logContainerRef}>
        {interactions.map((msg, index) => {
          if (msg.type === 'plan') {
            return (
              <div key={index} className="interaction-message-wrapper agent">
                <PlanDisplay plan={msg.plan} />
              </div>
            );
          }
          return (
            <div key={index} className={`interaction-message-wrapper ${msg.type}`}>
              <div className={`interaction-message ${msg.type}`}>
                <strong>{msg.type === 'user' ? 'You' : 'Agent'}</strong>
                {msg.text}
              </div>
            </div>
          );
        })}
      </div>

      <form className="chat-input" onSubmit={handleActionSubmit}>
        <input
          type="text"
          placeholder={isProcessingAction ? "Agent is executing a plan..." : "What should I do next for this case?"}
          value={userInput}
          onChange={(e) => setUserInput(e.target.value)}
          disabled={isProcessingAction || isSummaryLoading || !caseData}
        />
        <button type="submit" disabled={isProcessingAction || isSummaryLoading || !userInput.trim() || !caseData}>
          {isProcessingAction ? '...' : 'Submit'}
        </button>
      </form>
    </>
  );

  return (
    <div className="workspace-container">
      {showNewCaseModal && <NewCaseModal onCaseCreated={handleCaseCreated} onClose={() => setShowNewCaseModal(false)} />}
      {activeCaseId ? renderWorkspaceView() : renderNoActiveCaseView()}
    </div>
  );
}

export default Workspace;
```

### src/context/CaseContext.js ###
```
// src/context/CaseContext.js
import React, { createContext, useState, useContext } from 'react';

// 1. Create the context object
const CaseContext = createContext();

// 2. Create a custom hook for easy consumption by other components
export const useCaseContext = () => {
  return useContext(CaseContext);
};

// 3. Create the Provider component that will wrap our app
export const CaseProvider = ({ children }) => {
  const [activeCaseId, setActiveCaseId] = useState(null);

  // The value that will be available to all consuming components
  const value = {
    activeCaseId,
    setActiveCaseId,
  };

  return <CaseContext.Provider value={value}>{children}</CaseContext.Provider>;
};
```

--- Statistics ---
Total Files Scanned (excluding noise): 25
Files with Full Content Included: 20
Files Listed in Structure Only: 5
